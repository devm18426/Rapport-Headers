/*
* This header is generated by classdump-dyld 1.0
* Operating System: Version 11.2.3 (Build 20D91)
* Image Source: /usr/libexec/rapportd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/NSXPCListenerDelegate.h>
#import <libobjc.A.dylib/RPSubDaemonable.h>

@protocol OS_dispatch_queue;
@class NSMutableSet, NSXPCListener, NSObject, NSString;

@interface RPPrivateDaemon : NSObject <NSXPCListenerDelegate, RPSubDaemonable> {

	char _invalidateCalled;
	char _invalidateDone;
	char _prefPrivateDiscoveryEnabled;
	NSMutableSet* _xpcConnections;
	NSXPCListener* _xpcListener;
	NSObject*<OS_dispatch_queue> _dispatchQueue;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> dispatchQueue;              //@synthesize dispatchQueue=_dispatchQueue - In the implementation block
+(id)sharedPrivateDaemon;
-(id)init;
-(void)invalidate;
-(char)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
-(void)_invalidate;
-(NSObject*<OS_dispatch_queue>)dispatchQueue;
-(void)_update;
-(void)activate;
-(void)_invalidated;
-(void)setDispatchQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)_ensureStarted;
-(void)_ensureStopped;
-(id)descriptionWithLevel:(int)arg1 ;
-(void)_xpcConnectionInvalidated:(id)arg1 ;
-(void)addAdvertiser:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)removeAdvertiser:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)addDiscovery:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)removeDiscovery:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)prefsChanged;
-(void)daemonInfoChanged:(unsigned long long)arg1 ;
-(char)diagnosticCommand:(id)arg1 params:(id)arg2 ;
-(char)addXPCMatchingToken:(unsigned long long)arg1 event:(id)arg2 handler:(/*^block*/id)arg3 ;
-(char)removeXPCMatchingToken:(unsigned long long)arg1 ;
-(void)_processProbePtr:(const char*)arg1 end:(const char*)arg2 ;
-(void)_processResponsePtr:(const char*)arg1 end:(const char*)arg2 ;
-(void)_processAnnouncementPtr:(const char*)arg1 end:(const char*)arg2 ;
-(void)_processQueryPtr:(const char*)arg1 end:(const char*)arg2 ;
-(void)_processAnswerPtr:(const char*)arg1 end:(const char*)arg2 ;
-(void)_processPacketPtr:(const char*)arg1 end:(const char*)arg2 ;
@end

